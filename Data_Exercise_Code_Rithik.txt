#!/usr/bin/env python
# coding: utf-8

# # <font color=green>Data Excercise - Drug Overdose</font>

# <font color=green>Getting Started- PART 1</font>

# In[1]:


#importing packages
import pandas as pd
import numpy as np
import os

#reading CSV files
allergies_df=pd.read_csv('https://raw.githubusercontent.com/chop-analytics/analyst-take-home-task/master/datasets/allergies.csv')
medications_df=pd.read_csv('https://raw.githubusercontent.com/chop-analytics/analyst-take-home-task/master/datasets/medications.csv')
procedures_df=pd.read_csv('https://raw.githubusercontent.com/chop-analytics/analyst-take-home-task/master/datasets/procedures.csv')
encounters_df=pd.read_csv('https://raw.githubusercontent.com/chop-analytics/analyst-take-home-task/master/datasets/encounters.csv')
patients_df=pd.read_csv('https://raw.githubusercontent.com/chop-analytics/analyst-take-home-task/master/datasets/patients.csv')


# <font color=green>Exploring Data and Joining</font>

# In[2]:


patients_df.info()


# In[3]:


encounters_df.info()


# <font color=green>After carefully viewing the data, It was decided to inner join the encounters and patients tables</font>

# In[4]:


pat_encounter_df = pd.merge(encounters_df, patients_df, how="inner", left_on= 'PATIENT', right_on= 'Id', suffixes=("_E","_P"))


# <font color=green> Exploring the joined data </font>

# In[5]:


pat_encounter_df.info()


# <font color=green>No Records were lost.Now let's combine the medications table for us to assemble the project Cohort.</font>

# In[6]:


medications_df.info()


# <font color=green>The left join is performed to avoid losing the information of encounters/patients. The identifiers are used in suffixes to distinguish the same column names across the tables.</font>

# In[7]:


pat_encounter_med_df = pd.merge(pat_encounter_df, medications_df, how="left", left_on= ['Id_P','Id_E'], right_on= ['PATIENT','ENCOUNTER'], suffixes=("_E","_M"))


# <font color=green>Converting the columns comprising of dates into a Date datatype.</font>

# In[8]:


pat_encounter_med_df['START_E'] = pd.to_datetime(pat_encounter_med_df['START_E'], format= '%Y-%m-%d')
pat_encounter_med_df['STOP_E'] = pd.to_datetime(pat_encounter_med_df['STOP_E'], format= '%Y-%m-%d')
pat_encounter_med_df['BIRTHDATE'] = pd.to_datetime(pat_encounter_med_df['BIRTHDATE'], format= '%Y-%m-%d')
pat_encounter_med_df['DEATHDATE'] = pd.to_datetime(pat_encounter_med_df['DEATHDATE'], format= '%Y-%m-%d')
pat_encounter_med_df['START_M'] = pd.to_datetime(pat_encounter_med_df['START_M'], format= '%Y-%m-%d')
pat_encounter_med_df['STOP_M'] = pd.to_datetime(pat_encounter_med_df['STOP_M'], format= '%Y-%m-%d')


# <font color=green>Calculating the age at the time of encounter using the relativedelta package.</font>

# In[9]:


from dateutil.relativedelta import relativedelta
pat_encounter_med_df['AGE'] = pat_encounter_med_df.apply(lambda x: relativedelta(x.START_E, x.BIRTHDATE).years, axis=1)


# <font color=green>Checking if it worked.</font>

# In[10]:


pat_encounter_med_df[['START_E','BIRTHDATE','AGE']]


# <font color=green>It really did :) Now let's identify:</font>
#     
# <font color=green>1. The patients with age between 18 and 35 at the time of encounter.</font>
# <font color=green>2. The patient's visit is an encounter for drug overdose (Picked Drug rehabilitation and Detoxification)</font>
# <font color=green>3. The encounter occurs after july 15, 1999 </font>

# In[11]:


#creating a function:
def categorise(row):
    if 18<= row['AGE'] <= 35 and row['START_E'] > pd.Timestamp(1999,7,15) and 'Drug' in row['DESCRIPTION_E']:
        return 1
    else:
        return 0


# In[12]:



#creating a column that indicates the rows satisfying the condition using the lambda function. 
pat_encounter_med_df['PROJECT_COHORT'] = pat_encounter_med_df.apply(lambda row: categorise(row), axis=1) 


# <font color=green>Checking the number of rows that satisify the condition:</font>

# In[13]:


pat_encounter_med_df['PROJECT_COHORT'].value_counts()


# <font color=green>PART 2: Create additional fields</font>

# <font color=green>Just trying to get an idea on how the data is recorded for the project cohort. It is observed that not all records of project cohort have a death date. </font>

# In[14]:


pat_encounter_med_df[(pat_encounter_med_df['PROJECT_COHORT']==1) & (pd.isnull(pat_encounter_med_df['DEATHDATE'])== True)][['Id_P','Id_E','BIRTHDATE','DEATHDATE','START_E','STOP_E']].head(5)


# In[15]:


pat_encounter_med_df[(pat_encounter_med_df['PROJECT_COHORT']==1) & (pd.isnull(pat_encounter_med_df['DEATHDATE'])==False) ][['Id_P','Id_E','DEATHDATE','START_E','STOP_E']].head(5)


# <font color=green>Writing a function that returns 1 if the patient dies during the drug overdose encounter and 0 if the patient died at a different time. The function return null if the patient is not dead.</font>

# In[16]:


def death_ind(row):
    if pd.isnull(row['DEATHDATE'])== False:
        if  row['START_E'] <= row['DEATHDATE']<= row['STOP_E'] and row['PROJECT_COHORT']==1:
            return int(1)
        else:
            return int(0)
    else:
        return
    


# <font color=green>Creating a new column the reflects the returned value from above function.</font>

# In[17]:


pat_encounter_med_df['DEATH_AT_VISIT_IND'] = pat_encounter_med_df.apply(lambda row: death_ind(row), axis=1) 


# In[18]:


pat_encounter_med_df['DEATH_AT_VISIT_IND'].value_counts(dropna= False)


# <font color=green> It seems like there are no deaths during the drug overdose encounter. Converting 'DEATH_AT_VISIT_IND' into a int datatype.</font>

# In[19]:


pat_encounter_med_df['DEATH_AT_VISIT_IND']=pat_encounter_med_df['DEATH_AT_VISIT_IND'].astype('Int64')


# In[20]:


pat_encounter_med_df['DEATH_AT_VISIT_IND'].value_counts(dropna= False)


# <font color=green>Finding out the count of active medications at the start of the drug overdose encounter.</font>

# In[21]:


#subsetting the project cohort from main dataframe.
unique_patient_ids_df=pat_encounter_med_df[pat_encounter_med_df['PROJECT_COHORT']==1][['Id_P','Id_E','START_E', 'STOP_E']].drop_duplicates()


# In[22]:


unique_patient_ids_df.info()


# In[23]:


#creating a list of unique patients and their encounters for which the count of active medication needs to be determined.
unique_patient_ids=unique_patient_ids_df.values.tolist()

len(unique_patient_ids)


# <font color=green> The following logic will determine the count of active medications and count of active opioids (if any) at the start of the drug overdose encounter for the cohort.  </font>

# In[24]:


#initiating the list to tap the counters.
counter_list =[]
counter_op_list =[]

#for every item in unique_patient_ids: we can pull out patient_id, encounter_id, start and stop of encounter.(List of lists)
for i in unique_patient_ids:
    counter=0
    counter_op=0
    patient_id= i[0]
    encounter_id= i[1]
    start_e = i[2]
    stop_e= i[3]

    
    for j in range(len(pat_encounter_med_df[pat_encounter_med_df['Id_P']==patient_id])):
        if pd.isnull(pat_encounter_med_df.loc[j,"START_M"]) == True:
            
            counter=counter+0
            
        else:
            
            if pd.isnull(pat_encounter_med_df.loc[j,'STOP_M']== False):
                
                if pat_encounter_med_df.loc[j,"START_M"] <= start_e <= pat_encounter_med_df.loc[j,"STOP_M"]:
                    counter =counter+1
                    if pat_encounter_med_df.loc[j,"DESCRIPTION_M"] in ('Oxycodone-acetaminophen 100ML','Hydromorphone 325 MG','Fentanyl 100 MCG'):
                        counter_op = counter_op+1
                    else:
                        counter_op=counter_op+0
                    
                else:
                    counter =counter+0
                
            else:
                
                if pat_encounter_med_df.loc[j,"START_M"] <= start_e:
                    counter = counter+1
                    if pat_encounter_med_df.loc[j,"DESCRIPTION_M"] in ('Oxycodone-acetaminophen 100ML','Hydromorphone 325 MG','Fentanyl 100 MCG'):
                        counter_op = counter_op+1
                    else:
                        counter_op =counter_op+0
                                     
                else:
                    counter =counter+0    

    counter_list.append(counter)
    counter_op_list.append(counter_op)

    
#checking the tapped values.
print(counter_list)
print(counter_op_list)

#checking the length of the lists

print(len(counter_list))
print(len(counter_op_list))
    


# <font color=green>Now we will go through the counter_op_list and create a new list that indicates whether there was an active opioid at the time of encounter</font>

# In[25]:


op_ind_list=[]

for i in counter_op_list: 
    if i>=1:
        op_ind_list.append(1)
    else:
        op_ind_list.append(0)

len(op_ind_list)
print(op_ind_list)     
        


# In[26]:


#assigning the values in the list to the appropriate columns for the cohort. 
for i in range(len(unique_patient_ids)):
    patient_id= unique_patient_ids[i][0]
    encounter_id= unique_patient_ids[i][1]
    start_e = unique_patient_ids[i][2]
    stop_e= unique_patient_ids[i][3]
    
    
    df_index=pat_encounter_med_df.index[(pat_encounter_med_df['Id_P']== patient_id) & (pat_encounter_med_df['Id_E']== encounter_id)]
    
    
    pat_encounter_med_df.loc[df_index,'COUNT_CURRENT_MEDS']= counter_list[i]
    
    pat_encounter_med_df.loc[df_index, 'CURRENT_OPIOID_IND']= op_ind_list[i]
    
    
    
    
    


# In[27]:


#coverting the datatype:
pat_encounter_med_df['CURRENT_OPIOID_IND']=pat_encounter_med_df['CURRENT_OPIOID_IND'].astype('Int64')
pat_encounter_med_df['COUNT_CURRENT_MEDS']=pat_encounter_med_df['COUNT_CURRENT_MEDS'].astype('Int64')


# In[28]:


pat_encounter_med_df['CURRENT_OPIOID_IND'].value_counts(dropna=False)


# In[29]:


pat_encounter_med_df['COUNT_CURRENT_MEDS'].value_counts(dropna=False)


# <font color=green>Indicating the readmission within 90 and 30 days.</font>

# In[30]:


for i in unique_patient_ids:
    patient_id= i[0]
    encounter_id= i[1]
    start_e = i[2]
    stop_e= i[3]
    
    
    list_index=pat_encounter_med_df.index[(pat_encounter_med_df['Id_P']== patient_id) & (pat_encounter_med_df['PROJECT_COHORT']== 1)].tolist()
    
    for j in range(len(list_index)-1):
        
        pat_encounter_med_df.loc[list_index[j],'START_E_N'] = pat_encounter_med_df.loc[list_index[j+1],'START_E']
        
     
    
    for k in list_index:
        
        if pd.isnull(pat_encounter_med_df.loc[k,'START_E_N'])== True:
            
            pat_encounter_med_df.loc[k,"READMISSION_90_DAY_IND"] = 0
            
            pat_encounter_med_df.loc[k,"READMISSION_30_DAY_IND"] = 0
            
        else:
            
            if (pat_encounter_med_df.loc[k,"START_E_N"]-pat_encounter_med_df.loc[k,'START_E']) <= np.timedelta64(90,'D'):
                pat_encounter_med_df.loc[k,"READMISSION_90_DAY_IND"]= 1
                pat_encounter_med_df.loc[k,"FIRST_READMISSION_DATE"]= pat_encounter_med_df.loc[k,"START_E_N"]
                
                if (pat_encounter_med_df.loc[k,"START_E_N"]-pat_encounter_med_df.loc[k,'START_E']) <= np.timedelta64(30,'D'):
                    pat_encounter_med_df.loc[k,"READMISSION_30_DAY_IND"]= 1
                    
                else:
                    
                    pat_encounter_med_df.loc[k,"READMISSION_30_DAY_IND"]= 0
        
            else:
                
                pat_encounter_med_df.loc[k,"READMISSION_90_DAY_IND"]= 0
                pat_encounter_med_df.loc[k,"READMISSION_30_DAY_IND"]= 0
        
        


# In[31]:


pat_encounter_med_df['READMISSION_90_DAY_IND']=pat_encounter_med_df['READMISSION_90_DAY_IND'].astype('Int64')
pat_encounter_med_df['READMISSION_30_DAY_IND']=pat_encounter_med_df['READMISSION_30_DAY_IND'].astype('Int64')
pat_encounter_med_df['FIRST_READMISSION_DATE']= pd.to_datetime(pat_encounter_med_df['FIRST_READMISSION_DATE'], format= '%Y-%m-%d')


# In[32]:


pat_encounter_med_df['READMISSION_90_DAY_IND'].value_counts(dropna=False)


# In[33]:


pat_encounter_med_df['READMISSION_30_DAY_IND'].value_counts(dropna=False)


# In[34]:


pat_encounter_med_df['FIRST_READMISSION_DATE'].value_counts(dropna=False)


# In[35]:


pat_encounter_med_df.info()


# In[36]:


pat_encounter_med_df.rename(columns={'Id_P': 'PATIENT_ID', 'Id_E': 'ENCOUNTER_ID', 'START_E':'HOSPITAL_ENCOUNTER_DATE','AGE':'AGE_AT_VISIT'}, inplace=True)


# In[37]:


final_df= pat_encounter_med_df[['PATIENT_ID','ENCOUNTER_ID','HOSPITAL_ENCOUNTER_DATE','AGE_AT_VISIT','DEATH_AT_VISIT_IND','COUNT_CURRENT_MEDS','CURRENT_OPIOID_IND','READMISSION_90_DAY_IND','READMISSION_30_DAY_IND','FIRST_READMISSION_DATE']]


# In[38]:


final_df.info()


# In[39]:


#changing data types to the required format
patient_id_series = pd.Series(final_df.PATIENT_ID, dtype="string")
encounter_id_series= pd.Series(final_df.ENCOUNTER_ID, dtype="string")
final_df=final_df.copy()


# In[40]:


final_df['PATIENT_ID'] = patient_id_series
final_df['ENCOUNTER_ID'] = encounter_id_series


# In[41]:


final_df.info()


# In[42]:


#Exporting the dataframe to a csv file.
output_path=os.getcwd()+'\\rithiksai_ponugoti.csv'
final_df.to_csv(output_path,index=False)

